syntax = "proto2";
package protocol;

import "config_common.proto"; // for flex_plmn

/**
* RLC buffer status for a specific logical channel of a UE
*/

message flex_rlc_bsr {
	optional uint32 lc_id = 1; // logical channel identifier both SRBs and DRBs 
	optional uint32 tx_queue_size = 2; // transmission queue size of RLC 
	optional uint32 tx_queue_hol_delay = 3; // transmission queue head-of-line delay (waiting time) 
	optional uint32 retransmission_queue_size = 4; // retransmission queue size 
	optional uint32 retransmission_queue_hol_delay = 5; // retransmission queue head-of-line delay (waiting time) 
	optional uint32 status_pdu_size = 6;// size of of the (remaining) PDU
}

/**
 * Flags for MAC Control Elements
*/
enum flex_ce_type {
     FLPCET_TA = 1;
     FLPCET_DRX = 2;
     FLPCET_CR = 4;
     FLPCET_CA = 8;
}

/** 
 * Types of DL CSI reports
 */
enum flex_csi_type {
     FLCSIT_P10 = 0;
     FLCSIT_P11 = 1;
     FLCSIT_P20 = 2;
     FLCSIT_P21 = 3;
     FLCSIT_A12 = 4;
     FLCSIT_A22 = 5;
     FLCSIT_A20 = 6;
     FLCSIT_A30 = 7;
     FLCSIT_A31 = 8;
}

/**
* CSI type P10
*/
message flex_csi_p10 {
	optional uint32 wb_cqi = 1; // wideband channel quality indicator (CQI)
}

/**
* CSI type P11
*/
message flex_csi_p11 {
	repeated uint32 wb_cqi = 1; // wideband channel quality indicator
	optional uint32 wb_pmi = 2; // wideband precoding matrix indicator 
}

/**
 * CSI type P20
 */ 
message flex_csi_p20 {
	optional uint32 wb_cqi = 1; // wideband channel quality indicator
	optional uint32 sb_cqi = 2; // subband channel quality indicator 
	optional uint32 bandwidth_part_index = 3; // Bandwidth part index 
	optional uint32 sb_index = 4; //subband index 
}

/**
* CSI type P21
*/
message flex_csi_p21 {
	repeated uint32 wb_cqi = 1;  // wideband channel quality indicator
	optional uint32 wb_pmi = 2;  // wideband precoding matrix indicator  
	repeated uint32 sb_cqi = 3;  // subband channel quality indicator
	optional uint32 badwidth_part_index = 4; // Bandwidth part index 
	optional uint32 sb_index = 5; // subband index 
}

/**
 * CSI type A12
 */
message flex_csi_a12 {
	repeated uint32 wb_cqi = 1; // wideband channel quality indicator
	repeated uint32 sb_pmi = 2; // subband precoding matrix indicator 
}

/**
 * CSI type A22
 */
message flex_csi_a22 {
	repeated uint32 wb_cqi = 1; // wideband channel quality indicator 
	repeated uint32 sb_cqi = 2; // subband channel quality indicator 
	optional uint32 wb_pmi = 3; // wideband precoding matrix indicator  
	optional uint32 sb_pmi = 4;  // wideband precoding matrix indicator 
	repeated uint32 sb_list = 5; // subband list 
}

/**
 * CSI type A20
 */
message flex_csi_a20 {
	optional uint32 wb_cqi = 1; // wideband channel quality indicator 
	optional uint32 sb_cqi = 2;  // subband channel quality indicator 
	repeated uint32 sb_list = 3; // subband list 
}

/**
 * CSI type A30
 */ 
message flex_csi_a30 {
	optional uint32 wb_cqi = 1; // wideband channel quality indicator
	repeated uint32 sb_cqi = 2;  // subband channel quality indicator 
}

/**
 * CSI type A31
 */
message flex_csi_a31 {
	repeated uint32 wb_cqi = 1; // wideband channel quality indicator 
	repeated flex_msb_cqi sb_cqi = 2;  // subband channel quality indicator 
	optional uint32 wb_pmi = 3; // wideband precoding matrix indicator
}

/**
 * The CQI for the M-preffered subband
 */ 
message flex_msb_cqi {
	repeated uint32 sb_cqi = 1;  // subband channel quality indicator 
}

/**
 * The CSI report of the UE for a specific servCellIndex
*/
message flex_dl_csi {
	optional uint32 serv_cell_index = 1; // serving cell index 
	optional uint32 ri = 2; // rank indicator 
	optional flex_csi_type type = 3; // Channel Status Information
	oneof report {
	      flex_csi_p10 p10csi = 4;
	      flex_csi_p11 p11csi = 5;
	      flex_csi_p20 p20csi = 6;
	      flex_csi_p21 p21csi = 7;
	      flex_csi_a12 a12csi = 8;
	      flex_csi_a22 a22csi = 9;
	      flex_csi_a20 a20csi = 10;
	      flex_csi_a30 a30csi = 11;
	      flex_csi_a31 a31csi = 12;
	}
}

/**
 * The full DL CQI report for all CC of a UE
*/
message flex_dl_cqi_report {
	optional uint32 sfn_sn = 1; // combined frame and subframe number 
	repeated flex_dl_csi csi_report = 2; // Channel Status Information report 
}

/**
 * Paging message info
*/
message flex_paging_info {
	optional uint32 paging_index = 1; // paging index 
	optional uint32 paging_message_size = 2; // paging message size 
	optional uint32 paging_subframe = 3; // subframe number during which the paging message has been sent 
	optional uint32 carrier_index = 4; // frequency carrier index 
}

/**
* Report for the paging buffer status
*/
message flex_paging_buffer_report {
	repeated flex_paging_info paging_info = 1; // paging information 
}

/**
* The type of UL CQI
*/
enum flex_ul_cqi_type {
     FLUCT_SRS = 0;
     FLUCT_PUSCH = 1;
     FLUCT_PUCCH_1 = 2;
     FLUCT_PUCCH_2 = 3;
     FLUCT_PRACH = 4;
}

/**
 * UL CQI report for a specific UE for a given report type
*/
message flex_ul_cqi {
	optional flex_ul_cqi_type type = 1; // uplink channel quality information type 
	repeated uint32 sinr = 2; // Signal to interference noice ratio 
	optional uint32 serv_cell_index = 3; // serving cell index 
}

/**
* Full UL CQI report for a specific UE
*/
message flex_ul_cqi_report {
	optional uint32 sfn_sn = 1; // combined frame and subframe number 
	repeated flex_ul_cqi cqi_meas = 2; // uplink channel quality indicator 
	repeated flex_pucch_dbm pucch_dbm = 3; // PUCCH power in dbm
}


/**
* Physicall uplink control channel information 
*/
message flex_pucch_dbm {
	optional int32 p0_pucch_dbm = 1; // power in dbm in PUCCH
	optional uint32 serv_cell_index = 2; // serving cell index 
	optional uint32 p0_pucch_updated = 3; // updated power in dbm in PUCCH
}

/**
* UL noise and interference report for a UE
*/
message flex_noise_interference_report {
	optional uint32 sfn_sf = 1; // combined frame and subframe number 
	optional uint32 rip = 2; // Received Interference Power
	optional uint32 tnp = 3; // Thermal Noise Power
	optional int32 p0_nominal_pucch = 4; // nominal power in PUCCH 
}

/**
* RRC Measurements Primitives
*/
message flex_rrc_measurements {
	optional int32 measid = 1; // Measurement identifier. 
	// Primary Cell Reference Signal Received Power (RSRP).
	optional int32 pcell_rsrp = 2;
	// Primary Cell Reference Signal Received Quality (RSRQ).
	optional int32 pcell_rsrq = 3;
	// Neighboring cells measurements performed by UE.
	optional flex_neigh_cells_measurements neigh_meas = 4;
}

/**
* RRC neighboring cell measurements message
*/
message flex_neigh_cells_measurements {
	// Neighboring EUTRA cells measurements.
	repeated flex_eutra_measurements eutra_meas = 1;
}

/**
* RRC EURTA measurements message
*/
message flex_eutra_measurements {
	// Physical Cell identifier.
	optional int32 phys_cell_id = 1;
	// EUTRA Cell Global Identity (CGI) measurement.
	optional flex_eutra_cgi_measurements cgi_meas = 2;
	// EUTRA nearby cell reference signal measurement.
	optional flex_eutra_ref_signal_meas meas_result = 3;
}

/**
* RRC EUTRA Cell Global Identity (CGI) measurements message
*/
message flex_eutra_cgi_measurements {
	// EUTRA Cell Global Identity (CGI).
	optional flex_cell_global_eutra_id cgi = 1;
	// Tracking area code of the neighbor cell.
	optional uint32 tracking_area_code = 2;
	// Public land mobile network identifiers of neighbor cell.
	repeated flex_plmn plmn = 3;
}

/**
* RRC Cell Global Identity message
*/
message flex_cell_global_eutra_id {
	// Public land mobile network identifier of neighbor cell.
	optional flex_plmn plmn = 1;
	// Cell identifier of neighbor cell.
	optional uint32 cell_id = 2;
}

/**
* Public land mobile network identifier (PLMN) 
*/
message flex_plmn_identity {
	
	repeated uint32 mnc = 1; // Mobile Network Code (MNC)
	repeated uint32 mcc = 2; // Mobile Country Code (MCC)
	repeated uint32 tac = 3; // Tracking area code 
}

/**
* EUTR reference signal measurements
*/
message flex_eutra_ref_signal_meas {
	optional int32 rsrp = 1; 	// Neighboring Cell RSRP
	optional int32 rsrq = 2; 	// Neighboring Cell RSRQ	
}

/**
* PDCP Statistics
*/
message flex_pdcp_stats {

	optional uint32 pkt_tx = 1; // number of the transmitted packets
	optional uint32 pkt_tx_bytes = 2; // total bytes of the transmitted packets
	optional uint32 pkt_tx_sn = 3; // sequence number of the last transmit packet 
	optional uint32 pkt_tx_w = 4; // number of transmitted packets within a window
	optional uint32 pkt_tx_bytes_w = 5;  // total bytes of transmitted packets within a window
	optional uint32 pkt_tx_aiat = 7; // aggregtaed inter-arrival time of the transmitted packets
	optional uint32 pkt_tx_aiat_w = 8; // aggregtaed inter-arrival time of the transmitted packets within a window 
	
	optional uint32 pkt_rx = 9; // number of the received packets
	optional uint32 pkt_rx_bytes = 10; // total bytes of the received packets
	optional uint32 pkt_rx_sn = 11; // sequence number of the last received packet 
	optional uint32 pkt_rx_w = 12; // number of the received packets within a window
	optional uint32 pkt_rx_bytes_w = 13; // total bytes of the received packets within a window
	optional uint32 pkt_rx_aiat = 14; // aggregtaed inter-arrival time of the received packets
	optional uint32 pkt_rx_aiat_w = 15; // aggregtaed inter-arrival time of the received packets within a window 
        optional uint32 pkt_rx_oo = 16; // number of the out-of-ordered received packets  
	
	optional uint64 sfn=17;	 // frame number 
}

/**
* MAC scheduling stats
*/
message flex_mac_stats {

    optional uint32 tbs_dl = 1; //  current downlink transport block size
    optional uint32 tbs_ul = 2; //  current uplink transport block size
    optional uint32 prb_retx_dl = 3; // current physical resource block used for retransmission in downlink 
    optional uint32 prb_retx_ul = 4; // current physical resource block used for retransmission in uplink 
    optional uint32 prb_dl = 5; // current physical resource block used for new transmission in downlink
    optional uint32 prb_ul = 6; // current physical resource block used for new transmission in uplink
    optional uint32 mcs1_dl = 7; // current downlink MCS before rate mactching
    optional uint32 mcs2_dl = 8; // current downlink MCS after rate mactching
    optional uint32 mcs1_ul = 9; // current uplink MCS before rate mactching
    optional uint32 mcs2_ul = 10; // current uplink MCS after rate mactching
    optional uint32 total_bytes_sdus_ul = 11; // total bytes of uplink SDU size
    optional uint32 total_bytes_sdus_dl = 12; // total bytes of downlink SDU size
    optional uint32 total_prb_retx_dl = 13; // total bytes of downlink SDU size for retransmission 
    optional uint32 total_prb_retx_ul = 14; // total bytes of uplink SDU size for retransmission
    optional uint32 total_prb_dl = 15; // total physical resource block used in downlink  
    optional uint32 total_prb_ul = 16 ;// total physical resource block used in uplink  
    optional uint32 total_pdu_dl = 17; // total transmitted PDUs in downlink  
    optional uint32 total_pdu_ul = 18; // total transmitted PDUs in uplink  
    optional uint32 total_tbs_dl = 19; // total transport block size in downlink
    optional uint32 total_tbs_ul = 20; // total transport block size in uplink 
    repeated flex_mac_sdus_dl mac_sdus_dl = 21; // MAC SDU information  
    optional uint32 harq_round = 22;  // HARQ round 
}

/**
* MAC SDU information
*/ 
message flex_mac_sdus_dl {
    
    optional uint32 sdu_length = 1; // SDU length 
    optional uint32 lcid = 2; // logical channel identifier 
}

//
// GTP stats
//

message flex_gtp_stats {
    optional uint32 e_rab_id = 1;
    optional uint32 teid_enb = 2;
    optional string addr_enb = 3;
    optional uint32 teid_sgw = 4;
    optional string addr_sgw = 5;
}

//
// S1AP stats
//

message flex_s1ap_ue {
    optional string mme_s1_ip = 1;                  // IP of MME to which UE is connected
    optional uint32 enb_ue_s1ap_id = 2;             // S1AP ID on eNodeB side for UE
    optional uint32 mme_ue_s1ap_id = 3;             // S1AP ID on MME side for UE
    optional flex_plmn selected_plmn = 4;           // UE-selected PLMN in RRC Conn Setup Cplt
}
